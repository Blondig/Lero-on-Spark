package org.apache.spark.streaming.dstream;
/**
 * An internal DStream used to represent output operations like DStream.foreachRDD.
 * param:  parent        Parent DStream
 * param:  foreachFunc   Function to apply on each RDD generated by the parent DStream
 * param:  displayInnerRDDOps Whether the detailed callsites and scopes of the RDDs generated
 *                           by <code>foreachFunc</code> will be displayed in the UI; only the scope and
 *                           callsite of <code>DStream.foreachRDD</code> will be displayed.
 */
  class ForEachDStream<T extends java.lang.Object> extends org.apache.spark.streaming.dstream.DStream<scala.runtime.BoxedUnit> {
  // not preceding
  // TypeTree().setOriginal(TypeBoundsTree(TypeTree(), TypeTree()))
  public   ForEachDStream (org.apache.spark.streaming.dstream.DStream<T> parent, scala.Function2<org.apache.spark.rdd.RDD<T>, org.apache.spark.streaming.Time, scala.runtime.BoxedUnit> foreachFunc, boolean displayInnerRDDOps, scala.reflect.ClassTag<T> evidence$1)  { throw new RuntimeException(); }
  public  scala.Option<org.apache.spark.rdd.RDD<scala.runtime.BoxedUnit>> compute (org.apache.spark.streaming.Time validTime)  { throw new RuntimeException(); }
  public  scala.collection.immutable.List<org.apache.spark.streaming.dstream.DStream<?>> dependencies ()  { throw new RuntimeException(); }
  public  scala.Option<org.apache.spark.streaming.scheduler.Job> generateJob (org.apache.spark.streaming.Time time)  { throw new RuntimeException(); }
  public  org.apache.spark.streaming.Duration slideDuration ()  { throw new RuntimeException(); }
}
