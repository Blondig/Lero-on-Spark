package org.apache.spark;
/**
 * A coordinator that handles all global sync requests from BarrierTaskContext. Each global sync
 * request is generated by <code>BarrierTaskContext.barrier()</code>, and identified by
 * stageId + stageAttemptId + barrierEpoch. Reply all the blocking global sync requests upon
 * all the requests for a group of <code>barrier()</code> calls are received. If the coordinator is unable to
 * collect enough global sync requests within a configured time, fail all the requests and return
 * an Exception with timeout message.
 */
  class BarrierCoordinator implements org.apache.spark.rpc.ThreadSafeRpcEndpoint, org.apache.spark.internal.Logging {
  // not preceding
  public   BarrierCoordinator (long timeoutInSecs, org.apache.spark.scheduler.LiveListenerBus listenerBus, org.apache.spark.rpc.RpcEnv rpcEnv)  { throw new RuntimeException(); }
  public  void onStart ()  { throw new RuntimeException(); }
  public  void onStop ()  { throw new RuntimeException(); }
  public  scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receiveAndReply (org.apache.spark.rpc.RpcCallContext context)  { throw new RuntimeException(); }
  public  org.apache.spark.rpc.RpcEnv rpcEnv ()  { throw new RuntimeException(); }
}
